name: "DigitalOcean Droplet Deploy"
description: "Deploy a DigitalOcean Droplet with Docker, Nginx, and automatic HTTPS."
author: marksowell
branding:
  icon: "droplet"
  color: "blue"

inputs:
  DIGITALOCEAN_ACCESS_TOKEN:
    description: "DigitalOcean API token."
    required: true
  DIGITALOCEAN_SSH_KEY_ID:
    description: "DigitalOcean SSH key ID."
    required: true
  domain:
    description: "Root domain (example.com)."
    required: true
  subdomain:
    description: "Subdomain (e.g., app, www, test). Leave blank for root."
    required: false
  hostname:
    description: "Droplet hostname."
    required: true
  region:
    description: "DigitalOcean region (default: sfo3)."
    default: "sfo3"
  size:
    description: "Droplet size slug (default: s-1vcpu-512mb-10gb)."
    default: "s-1vcpu-512mb-10gb"
  image:
    description: "Droplet image slug (default: ubuntu-22-04-x64)."
    default: "ubuntu-22-04-x64"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ inputs.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Prepare cloud-init with vars
      shell: bash
      run: |
        DOMAIN="${{ inputs.domain }}"
        SUBDOMAIN="${{ inputs.subdomain }}"
        EMAIL="admin@${DOMAIN}"

        if [ -z "$SUBDOMAIN" ] || [ "$SUBDOMAIN" = "@" ]; then
          FQDN="$DOMAIN"
        else
          FQDN="$SUBDOMAIN.$DOMAIN"
        fi

        sed "s/{{EMAIL}}/$EMAIL/g; s/{{FQDN}}/$FQDN/g" cloud-init.yml > cloud-init-final.yml
        echo "fqdn=$FQDN" >> $GITHUB_OUTPUT

    - name: Create Droplet
      id: droplet
      shell: bash
      run: |
        REGION="${{ inputs.region }}"
        SIZE="${{ inputs.size }}"
        IMAGE="${{ inputs.image }}"
        HOSTNAME="${{ inputs.hostname }}"

        echo "Creating droplet: $HOSTNAME ($SIZE, $REGION, $IMAGE)"

        doctl compute droplet create "$HOSTNAME" \
          --region "$REGION" \
          --size "$SIZE" \
          --image "$IMAGE" \
          --ssh-keys ${{ inputs.DIGITALOCEAN_SSH_KEY_ID }} \
          --user-data-file cloud-init-final.yml \
          --wait

        IP=$(doctl compute droplet list "$HOSTNAME" --format PublicIPv4 --no-header)
        echo "droplet_ip=$IP" >> $GITHUB_OUTPUT

    - name: Create/Update DNS Record
      id: dns
      shell: bash
      run: |
        DOMAIN="${{ inputs.domain }}"
        SUBDOMAIN="${{ inputs.subdomain }}"
        IP="${{ steps.droplet.outputs.droplet_ip }}"

        if [ -z "$SUBDOMAIN" ]; then
          SUBDOMAIN="@"
        fi

        echo "Updating DNS for $SUBDOMAIN.$DOMAIN -> $IP"

        RECORD_ID=$(doctl compute domain records list "$DOMAIN" \
          --format ID,Type,Name,Data \
          --no-header | awk -v sname="$SUBDOMAIN" '$2=="A" && $3==sname {print $1}')

        if [ -z "$RECORD_ID" ]; then
          echo "Record not found. Creating..."
          doctl compute domain records create "$DOMAIN" \
            --record-type A \
            --record-name "$SUBDOMAIN" \
            --record-data "$IP"
        else
          echo "Record exists. Updating..."
          doctl compute domain records update "$DOMAIN" \
            --record-id "$RECORD_ID" \
            --record-data "$IP"
        fi

        echo "fqdn=$SUBDOMAIN.$DOMAIN" >> $GITHUB_OUTPUT

    - name: Wait for HTTPS service
      shell: bash
      run: |
        FQDN="${{ steps.dns.outputs.fqdn }}"
        echo "Waiting for https://$FQDN to respond..."
        for i in {1..30}; do
          if curl -sk --max-time 10 https://$FQDN | grep -q "nginx over HTTPS is working"; then
            echo "✅ HTTPS is up at https://$FQDN"
            exit 0
          fi
          echo "⏳ Attempt $i/30: HTTPS not ready yet... retrying in 30s"
          sleep 30
        done
        echo "❌ Timeout: HTTPS service did not start in time"
        exit 1

    - name: Show Summary
      shell: bash
      run: |
        echo "### ✅ Droplet Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Hostname: \`${{ inputs.hostname }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Public IP: \`${{ steps.droplet.outputs.droplet_ip }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- DNS: \`${{ steps.dns.outputs.fqdn }}\` → \`${{ steps.droplet.outputs.droplet_ip }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- HTTPS: \`https://${{ steps.dns.outputs.fqdn }}\`" >> $GITHUB_STEP_SUMMARY
